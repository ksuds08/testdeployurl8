# Auto-generated by Flowglass - Cloudflare Worker Deployment
# flowglass-deployment-target: cloudflare
# Worker: testdeployurl8
# Project ID: 07d86ff4-6d33-45ce-959a-a35449976caa
# Live URL: Will be available after first deployment

name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - preview

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Worker
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            npm install --global yarn
            yarn install --frozen-lockfile
          elif [ -f "pnpm-lock.yaml" ]; then
            npm install --global pnpm
            pnpm install --frozen-lockfile
          elif [ -f "bun.lockb" ]; then
            npm install --global bun
            bun install
          elif [ -f "package.json" ]; then
            npm install
          else
            echo "::notice::No package.json found, skipping dependency installation"
          fi
          echo "::endgroup::"

      - name: Run tests
        run: |
          if [ -f "package.json" ]; then
            if node -e "try { const pkg = require('./package.json'); process.exit(pkg?.scripts?.test ? 0 : 1); } catch { process.exit(1); }" >/dev/null 2>&1; then
              npm test || echo "::warning::Tests failed but continuing deployment"
            else
              echo "::notice::No tests configured"
            fi
          else
            echo "::notice::No package.json found, skipping tests"
          fi

      - name: Build application
        run: |
          echo "::group::Building application"
          if [ -f "package.json" ]; then
            if node -e "try { const pkg = require('./package.json'); process.exit(pkg?.scripts?.build ? 0 : 1); } catch { process.exit(1); }" >/dev/null 2>&1; then
              echo "::notice::Running build script..."
              if ! npm run build; then
                echo "::error::Build failed. Fix build errors before deployment."
                exit 1
              fi
              echo "::notice::Build completed successfully"
            else
              echo "::notice::No build script found in package.json"
            fi
          else
            echo "::notice::No package.json found, skipping build"
          fi
          echo "::endgroup::"

      - name: Install Wrangler
        run: npm install -g wrangler@latest

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: context.inputs?.environment || "production",
              description: "Cloudflare Workers deployment",
              auto_merge: false,
              required_contexts: []
            });
            core.setOutput("deployment_id", deployment.data.id);

      - name: Deploy to Cloudflare Workers
        id: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: 6ec57290cbb52c27cda0bd089bae05a0
        run: |
          set -eo pipefail
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          WORKER_NAME="testdeployurl8"
          
          if [ "$ENVIRONMENT" = "preview" ]; then
            WORKER_NAME="${WORKER_NAME}-preview"
          fi
          echo "WORKER_NAME=$WORKER_NAME" >> $GITHUB_ENV
          echo "DEPLOY_ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          
          # Validate required secrets
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "::error::CLOUDFLARE_API_TOKEN secret is not set. Please configure it in repository settings."
            exit 1
          fi
          
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "::error::CLOUDFLARE_ACCOUNT_ID secret is not set. Please configure it in repository settings."
            exit 1
          fi
          
          echo "::notice::Deploying to $WORKER_NAME ($ENVIRONMENT environment)"
          
          # Deploy with wrangler and capture output
          if [ -f "wrangler.toml" ]; then
            echo "::notice::Using wrangler.toml configuration"
            wrangler deploy --outdir .wrangler 2>&1 | tee deploy.log
          else
            echo "::notice::No wrangler.toml found, using CLI arguments"
            wrangler deploy --name "$WORKER_NAME" --compatibility-date $(date +%Y-%m-%d) --outdir .wrangler 2>&1 | tee deploy.log
          fi
          
          # Extract deployment URL using multiple strategies
          DEPLOYED_URL=""
          
          # Strategy 1: Check for JSON metadata file from wrangler
          if [ -f ".wrangler/deploy.json" ]; then
            echo "::notice::Found wrangler deployment metadata"
            DEPLOYED_URL=$(cat .wrangler/deploy.json | grep -oP '"url"\s*:\s*"\K[^"]+' | head -1 || echo "")
          fi
          
          # Strategy 2: Parse from deployment log output (fallback)
          if [ -z "$DEPLOYED_URL" ]; then
            echo "::notice::Extracting URL from deployment logs"
            DEPLOYED_URL=$(grep -oP "https://[a-zA-Z0-9.-]+\\.workers\\.dev" deploy.log | head -1 || echo "")
          fi
          
          # Strategy 3: Construct URL from worker name (last resort)
          if [ -z "$DEPLOYED_URL" ]; then
            echo "::warning::Could not extract URL from deployment output, constructing from worker name"
            DEPLOYED_URL="https://${WORKER_NAME}.workers.dev"
            echo "::notice::Constructed URL: $DEPLOYED_URL (verification recommended)"
          fi
          
          if [ -n "$DEPLOYED_URL" ]; then
            echo "url=$DEPLOYED_URL" >> $GITHUB_OUTPUT
            echo "::notice::Worker deployed to $DEPLOYED_URL"
          else
            echo "::error::Failed to determine deployment URL"
            exit 1
          fi

      - name: Update Deployment URL in Flowglass
        if: steps.deploy.outputs.url != ''
        run: |
          curl -X POST \
            "${{ secrets.FLOWGLASS_API_URL || 'https://gfuimydpzkqzpcqqhvpu.supabase.co' }}/functions/v1/update-deployment-url" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.FLOWGLASS_API_KEY }}" \
            -d '{
              "projectId": "07d86ff4-6d33-45ce-959a-a35449976caa",
              "deploymentUrl": "${{ steps.deploy.outputs.url }}",
              "deploymentTarget": "cloudflare",
              "metadata": {
                "workflow_run_id": "${{ github.run_id }}",
                "workflow_run_number": "${{ github.run_number }}",
                "commit_sha": "${{ github.sha }}",
                "environment": "${{ env.DEPLOY_ENVIRONMENT }}",
                "worker_name": "testdeployurl8"
              }
            }'

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = ${{ steps.deployment.outputs.deployment_id }};
            const state = '${{ steps.deploy.outcome }}' === 'success' ? 'success' : 'failure';
            const environment = context.inputs?.environment || "production";
            const deploymentUrl = "${{ steps.deploy.outputs.url }}" || null;
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: state,
              environment_url: deploymentUrl,
              description: state === "success" ? "Deployment successful" : "Deployment failed",
              auto_inactive: true
            });

      - name: Create summary
        if: always()
        env:
          WORKER_NAME: ${{ env.WORKER_NAME }}
          DEPLOY_ENVIRONMENT: ${{ env.DEPLOY_ENVIRONMENT }}
          DEPLOY_URL: ${{ steps.deploy.outputs.url }}
          DEPLOY_OUTCOME: ${{ steps.deploy.outcome }}
        run: |
          echo "## Cloudflare Workers Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Worker Name:** ${WORKER_NAME:-unknown}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${DEPLOY_ENVIRONMENT}" ]; then
            echo "**Environment:** ${DEPLOY_ENVIRONMENT}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Environment:** production" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**Status:** ${DEPLOY_OUTCOME:-unknown}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${DEPLOY_URL}" ]; then
            echo "**URL:** ${DEPLOY_URL}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
